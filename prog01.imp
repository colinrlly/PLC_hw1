;; name: Colin Reilly
;; Time spent on assignment: 
;; Collaborators: Colin Reilly

(define abs (n) (if (< n 0) (* -1 n) n))
(define min (a b) (if (< a b) a b))
(define max (a b) (if (> a b) a b))
(define gcd (m n)
  (if (or (< m 0) (< n 0))
      (gcd (max m (* -1 m)) (max n (* -1 n)))
      (if (= n 0)
          m
          (gcd n (mod m n)))))

;; A (Exercise 4)
;; DEFINE sigma HERE
( define sigma ( m n )
    ( if ( > n m )
        ( + ( sigma ( + m 1 ) n ) m )
        m
    )
)

;; B.a (Exercise 5a)
;; DEFINE exp HERE
( define exp ( b n )
    ( if ( = n 0 )
        1
        ( * b ( exp b ( - n 1 )))
    )
)

;; B.b (Exercise 5b)
;; DEFINE log HERE
( define log ( b m )
    ( log_help b m 0 )
)

( define log_help ( b m n )
    ( if ( > ( exp b ( + n 1 )) m )
        n
        ( log_help b m ( + n 1 ))
    )
)

;; C (Exercise 6)
;; DEFINE choose HERE
( define choose ( n k )
    ( if ( = n k )
        1
        ( if ( = k 0 )
            1
            ( + ( choose ( - n 1 ) k ) ( choose ( - n 1 ) ( - k 1 )))    
        )
    )
)

;; D (Exercise 7)
;; DEFINE fib HERE
( define fib ( n )
    ( if ( = n 0 ) 
        0
        ( if ( = n 1 )
            1
            ( + ( fib ( - n 1 )) ( fib ( - n 2 )))
        )
    )
)

;; E.a (Exercise 8a)
;; DEFINE prime? HERE
( define prime? ( n )
    ( prime?_help n ( - n 1 ))
)

( define prime?_help ( n m )
    ( if ( = m 1 ) 
        1
        ( if ( = n ( * ( / n m ) m)) 
            0
            ( prime?_help n ( - m 1 ))
        )
    )
)

;; E.b (Exercise 8b)
;; DEFINE nthprime HERE
( define nthprime ( n )
   ( nthprime_help n 1 ) 
)

( define nthprime_help ( n curr )
    ( if ( = n 0 )
        curr
        ( begin 
            ( set curr ( + curr 1 ))
            ( if ( = ( prime? curr ) 1 )
                ( nthprime_help ( - n 1 ) curr )
                ( nthprime_help n curr )
            )
        )
    )
)

;; E.c (Exercise 8c)
;; DEFINE sumprimes HERE
( define sumprimes ( n )
    ( if ( = n 0 )
        0
        ( + ( nthprime n ) ( sumprimes ( - n 1 )))
    )
)

;; E.d (Exercise 8d)
;; DEFINE relprime? HERE
( define relprime? ( m n )
    ( if ( = (gcd m n ) 1 )
        1
        0
    )
)

;; F.a (Exercise 9a)
;; DEFINE given-positive-all-fours? HERE
( define given-positive-all-fours? ( n )
    ( gpaf?_help n 4 )
)

( define gpaf?_help ( n check )
    ( if ( = check n )
        1
        ( if ( < n check )
            0
            ( gpaf?_help n ( + 4 ( * 10 check )))
        )
    )
)

;; F.b (Exercise 9b)
;; DEFINE all-fours? HERE
( define all-fours? ( n )
    ( if ( < n 0 )
        ( gpaf?_negative_help n -4 )
        ( gpaf?_help n 4 )
    )
)

( define gpaf?_negative_help ( n check )
    ( if ( = check n )
        1
        ( if ( > n check )
            0
            ( gpaf?_negative_help n ( - ( * 10 check ) 4 ))
        )
    )
)

;; F.c (Exercise 9c)
;; DEFINE all-one-digit? HERE
( define all-one-digit? ( n )
    ( aod?_help n ( get-one-digit n ) ( get-one-digit n ))
)

( define aod?_help ( n digit check )
    ( if ( = check n )
        1
        ( if ( || ( && ( < n 0 ) ( > n check ) ) ( && ( > n 0 ) ( < n check )))
            0
            ( aod?_help n digit ( + digit ( * 10 check )))
        )
    )
)

( define get-one-digit ( n )
    ( if ( && ( < n 10 ) ( > n -10 ))
        n
        ( get-one-digit ( / n 10 ))
    )
)

;; F.d (Exercise 9d)
;; DEFINE increasing-digits? HERE
( define increasing-digits? ( n )
    ( id?_help n ( get-one-digit n ) ( get-one-digit n ))
)

( define id?_help ( n digit check )
    ( if ( = check n )
        1
        ( if ( || ( && ( < n 0 ) ( > n check ) ) ( && ( > n 0 ) ( < n check )))
            0
            ( id?_help n ( + digit ( if ( > n 0 ) 1 -1 )) ( + ( + digit ( if ( > n 0 ) 1 -1 ) ) ( * 10 check )))
        )
    )
)

;; G (Exercise 10)
;; DEFINE binary HERE
( define binary ( n )
    ( if ( > n 0 ) 
        ( binary_help n 1 0 )
        ( - 0 ( binary_help ( - 0 n ) 1 0))
    )
)

( define binary_help ( n i m )
    ( if ( > n 0 )
        ( binary_help ( / n 2 ) ( * i 10 ) ( + m ( * i ( mod n 2 ))))
        m
    )
)

;; H
;; DEFINE aliquot-class HERE
( define aliquot-class ( n )
    ( if ( = n 1 )
        -1
        ( if ( < ( aliquot-sum n ( - n 1)) n )
            -1
            ( if ( = ( aliquot-sum n ( - n 1 )) n)
                0
                1
            )
        )
    )
)

( define aliquot-sum ( n m )
    ( if ( = m 1 )
        1
        ( if ( = n ( * ( / n m ) m ))
            ( + m ( aliquot-sum n ( - m 1 )))
            ( + 0 ( aliquot-sum n ( - m 1 )))
        )
    )
)

;; Ia
;; DEFINE hailstone-length HERE
( define hailstone-length ( n )
    ( if ( = n 1 )
        0
        ( if ( = ( mod n 2 ) 0 )
            ( + 1 ( hailstone-length ( / n 2 )))
            ( + 1 ( hailstone-length ( + ( * n 3 ) 1 )))
        )
    )
)

;; Ib
;; DEFINE hailstone-max HERE
( define hailstone-max ( n )
    ( hm_help n 1 )
)

( define hm_help ( n c ) 
    ( if ( = n 1 )
        c
        ( if ( = ( mod n 2 ) 0 )
            ( if ( < c n ) 
                ( hm_help ( / n 2 ) n )
                ( hm_help ( / n 2 ) c )
            )
            ( if ( < c n )
                ( hm_help ( + ( * n 3 ) 1 ) n )
                ( hm_help ( + ( * n 3 ) 1 ) c )
            )
        )
    )
)

;; test-ExerciseA-sigma.imp
(check-expect (sigma   0  0) 0)
(check-expect (sigma   0  5) 15)
(check-expect (sigma   0 10) 55)
(check-expect (sigma   5  5) 5)
(check-expect (sigma   5 10) 45)
(check-expect (sigma   5 15) 110)
(check-expect (sigma  -5  0) -15)
(check-expect (sigma -10  0) -55)
(check-expect (sigma  -5 -5) -5)
(check-expect (sigma -10 -5) -45)
(check-expect (sigma -15 -5) -110)

;; test-ExerciseBa-exp.imp
(check-expect (exp 0  1) 0)
(check-expect (exp 0  5) 0)
(check-expect (exp 0 10) 0)
(check-expect (exp 2  0) 1)
(check-expect (exp 2  5) 32)
(check-expect (exp 2 10) 1024)
(check-expect (exp 2 15) 32768)
(check-expect (exp 5  0) 1)
(check-expect (exp 5  5) 3125)
(check-expect (exp 5 10) 9765625)

;; test-ExerciseBb-log.imp
(check-expect (log 2     1) 0)
(check-expect (log 2     2) 1)
(check-expect (log 2     3) 1)
(check-expect (log 2     4) 2)
(check-expect (log 2     5) 2)
(check-expect (log 2     6) 2)
(check-expect (log 2     7) 2)
(check-expect (log 2     8) 3)
(check-expect (log 2     9) 3)
(check-expect (log 2    10) 3)
(check-expect (log 2   127) 6)
(check-expect (log 2   128) 7)
(check-expect (log 2   129) 7)
(check-expect (log 2  1023) 9)
(check-expect (log 2  1024) 10)
(check-expect (log 2  1025) 10)
(check-expect (log 3     1) 0)
(check-expect (log 3     2) 0)
(check-expect (log 3     3) 1)
(check-expect (log 3     4) 1)
(check-expect (log 3     5) 1)
(check-expect (log 3     6) 1)
(check-expect (log 3     7) 1)
(check-expect (log 3     8) 1)
(check-expect (log 3     9) 2)
(check-expect (log 3    10) 2)
(check-expect (log 3  6560) 7)
(check-expect (log 3  6561) 8)
(check-expect (log 3  6562) 8)
(check-expect (log 3 59048) 9)
(check-expect (log 3 59049) 10)
(check-expect (log 3 59050) 10)
(check-expect (log 4 59050) 7)
(check-expect (log 5 59050) 6)
(check-expect (log 6 59050) 6)
(check-expect (log 7 59050) 5)
(check-expect (log 8 59050) 5)
(check-expect (log 9 59050) 5)

;; test-ExerciseC-choose.imp
(check-expect (choose  0  0) 1)
(check-expect (choose  2  0) 1)
(check-expect (choose  2  1) 2)
(check-expect (choose  2  2) 1)
(check-expect (choose 10  0) 1)
(check-expect (choose 10  2) 45)
(check-expect (choose 10  4) 210)
(check-expect (choose 10  5) 252)
(check-expect (choose 10  6) 210)
(check-expect (choose 10  8) 45)
(check-expect (choose 10 10) 1)
(check-expect (choose 20  0) 1)
(check-expect (choose 20  4) 4845)
(check-expect (choose 20  9) 167960)
(check-expect (choose 20 10) 184756)
(check-expect (choose 20 11) 167960)
(check-expect (choose 20 16) 4845)
(check-expect (choose 20 20) 1)

;; test-ExerciseD-fib.imp
(check-expect (fib  0) 0)
(check-expect (fib  1) 1)
(check-expect (fib  2) 1)
(check-expect (fib  3) 2)
(check-expect (fib  4) 3)
(check-expect (fib  5) 5)
(check-expect (fib 10) 55)
(check-expect (fib 15) 610)
(check-expect (fib 20) 6765)
(check-expect (fib 25) 75025)

;; test-ExerciseEa-prime?.imp
(check-expect (prime?    2) 1)
(check-expect (prime?    3) 1)
(check-expect (prime?    4) 0)
(check-expect (prime?    5) 1)
(check-expect (prime?    6) 0)
(check-expect (prime?    7) 1)
(check-expect (prime?    8) 0)
(check-expect (prime?    9) 0)
(check-expect (prime?   10) 0)
(check-expect (prime?   11) 1)
(check-expect (prime?   12) 0)
(check-expect (prime?   13) 1)
(check-expect (prime?   14) 0)
(check-expect (prime? 1008) 0)
(check-expect (prime? 1009) 1)
(check-expect (prime? 1010) 0)
(check-expect (prime? 1011) 0)
(check-expect (prime? 1012) 0)
(check-expect (prime? 1013) 1)
(check-expect (prime? 1014) 0)

;; test-ExerciseEb-nthprime.imp
(check-expect (nthprime  1) 2)
(check-expect (nthprime  2) 3)
(check-expect (nthprime  3) 5)
(check-expect (nthprime  4) 7)
(check-expect (nthprime  5) 11)
(check-expect (nthprime  6) 13)
(check-expect (nthprime  7) 17)
(check-expect (nthprime  8) 19)
(check-expect (nthprime  9) 23)
(check-expect (nthprime 10) 29)
(check-expect (nthprime 20) 71)
(check-expect (nthprime 30) 113)
(check-expect (nthprime 40) 173)
(check-expect (nthprime 50) 229)
(check-expect (nthprime 75) 379)

;; test-ExerciseEc-sumprimes.imp
(check-expect (sumprimes  1) 2)
(check-expect (sumprimes  2) 5)
(check-expect (sumprimes  3) 10)
(check-expect (sumprimes  4) 17)
(check-expect (sumprimes  5) 28)
(check-expect (sumprimes  6) 41)
(check-expect (sumprimes  7) 58)
(check-expect (sumprimes  8) 77)
(check-expect (sumprimes  9) 100)
(check-expect (sumprimes 10) 129)
(check-expect (sumprimes 20) 639)
(check-expect (sumprimes 30) 1593)
(check-expect (sumprimes 40) 3087)
(check-expect (sumprimes 50) 5117)

;; test-ExerciseEd-relprime?.imp
(check-expect (relprime?    2    2) 0)
(check-expect (relprime?    2    3) 1)
(check-expect (relprime?    2    4) 0)
(check-expect (relprime?    2    5) 1)
(check-expect (relprime?    2    6) 0)
(check-expect (relprime?    3    2) 1)
(check-expect (relprime?    3    3) 0)
(check-expect (relprime?    3    4) 1)
(check-expect (relprime?    3    5) 1)
(check-expect (relprime?    3    6) 0)
(check-expect (relprime?    4    2) 0)
(check-expect (relprime?    4    3) 1)
(check-expect (relprime?    4    4) 0)
(check-expect (relprime?    4    5) 1)
(check-expect (relprime?    4    6) 0)
(check-expect (relprime?    5    2) 1)
(check-expect (relprime?    5    3) 1)
(check-expect (relprime?    5    4) 1)
(check-expect (relprime?    5    5) 0)
(check-expect (relprime?    5    6) 1)
(check-expect (relprime?    6    2) 0)
(check-expect (relprime?    6    3) 0)
(check-expect (relprime?    6    4) 0)
(check-expect (relprime?    6    5) 1)
(check-expect (relprime?    6    6) 0)
(check-expect (relprime?   18  712) 0)
(check-expect (relprime?  514  793) 1)
(check-expect (relprime?    8  819) 1)
(check-expect (relprime?  813  286) 1)
(check-expect (relprime?  759  824) 1)
(check-expect (relprime?  863  133) 1)
(check-expect (relprime?  255  695) 0)
(check-expect (relprime?  254  726) 0)
(check-expect (relprime?  708  102) 0)
(check-expect (relprime?  781   87) 1)
(check-expect (relprime?  510  248) 0)
(check-expect (relprime?  445  220) 0)
(check-expect (relprime?  572  977) 1)
(check-expect (relprime?  983  736) 1)
(check-expect (relprime?  376  875) 1)
(check-expect (relprime?  901  876) 1)
(check-expect (relprime?  879  675) 0)
(check-expect (relprime?  302  377) 1)
(check-expect (relprime?  852  569) 1)
(check-expect (relprime?  726  408) 0)
(check-expect (relprime?  617  289) 1)

;; test-ExerciseFa-given-positive-all-fours?.imp
(check-expect (given-positive-all-fours? 1) 0)
(check-expect (given-positive-all-fours? 2) 0)
(check-expect (given-positive-all-fours? 3) 0)
(check-expect (given-positive-all-fours? 4) 1)
(check-expect (given-positive-all-fours? 5) 0)
(check-expect (given-positive-all-fours? 10) 0)
(check-expect (given-positive-all-fours? 11) 0)
(check-expect (given-positive-all-fours? 12) 0)
(check-expect (given-positive-all-fours? 13) 0)
(check-expect (given-positive-all-fours? 14) 0)
(check-expect (given-positive-all-fours? 15) 0)
(check-expect (given-positive-all-fours? 30) 0)
(check-expect (given-positive-all-fours? 31) 0)
(check-expect (given-positive-all-fours? 32) 0)
(check-expect (given-positive-all-fours? 33) 0)
(check-expect (given-positive-all-fours? 34) 0)
(check-expect (given-positive-all-fours? 35) 0)
(check-expect (given-positive-all-fours? 40) 0)
(check-expect (given-positive-all-fours? 41) 0)
(check-expect (given-positive-all-fours? 42) 0)
(check-expect (given-positive-all-fours? 43) 0)
(check-expect (given-positive-all-fours? 44) 1)
(check-expect (given-positive-all-fours? 45) 0)
(check-expect (given-positive-all-fours? 444) 1)
(check-expect (given-positive-all-fours? 443) 0)
(check-expect (given-positive-all-fours? 4444) 1)
(check-expect (given-positive-all-fours? 4443) 0)
(check-expect (given-positive-all-fours? 44444) 1)
(check-expect (given-positive-all-fours? 44443) 0)

;; test-ExerciseFb-all-fours?.imp
(check-expect (all-fours? -5) 0)
(check-expect (all-fours? -4) 1)
(check-expect (all-fours? -3) 0)
(check-expect (all-fours? -2) 0)
(check-expect (all-fours? -1) 0)
(check-expect (all-fours? 0) 0)
(check-expect (all-fours? 1) 0)
(check-expect (all-fours? 2) 0)
(check-expect (all-fours? 3) 0)
(check-expect (all-fours? 4) 1)
(check-expect (all-fours? 5) 0)
(check-expect (all-fours? -15) 0)
(check-expect (all-fours? -14) 0)
(check-expect (all-fours? -13) 0)
(check-expect (all-fours? -12) 0)
(check-expect (all-fours? -11) 0)
(check-expect (all-fours? 10) 0)
(check-expect (all-fours? 11) 0)
(check-expect (all-fours? 12) 0)
(check-expect (all-fours? 13) 0)
(check-expect (all-fours? 14) 0)
(check-expect (all-fours? 15) 0)
(check-expect (all-fours? -45) 0)
(check-expect (all-fours? -44) 1)
(check-expect (all-fours? -43) 0)
(check-expect (all-fours? -42) 0)
(check-expect (all-fours? -41) 0)
(check-expect (all-fours? 40) 0)
(check-expect (all-fours? 41) 0)
(check-expect (all-fours? 42) 0)
(check-expect (all-fours? 43) 0)
(check-expect (all-fours? 44) 1)
(check-expect (all-fours? 45) 0)
(check-expect (all-fours? -444) 1)
(check-expect (all-fours? -443) 0)
(check-expect (all-fours? -4444) 1)
(check-expect (all-fours? -4443) 0)
(check-expect (all-fours? -44444) 1)
(check-expect (all-fours? -44443) 0)
(check-expect (all-fours? 444) 1)
(check-expect (all-fours? 443) 0)
(check-expect (all-fours? 4444) 1)
(check-expect (all-fours? 4443) 0)
(check-expect (all-fours? 44444) 1)
(check-expect (all-fours? 44443) 0)

;; test-ExerciseFc-all-one-digit?.imp
(check-expect (all-one-digit? 0) 1)
(check-expect (all-one-digit? -4) 1)
(check-expect (all-one-digit? 4) 1)
(check-expect (all-one-digit? -44444) 1)
(check-expect (all-one-digit? -44443) 0)
(check-expect (all-one-digit? -34) 0)
(check-expect (all-one-digit? 44444) 1)
(check-expect (all-one-digit? 44443) 0)
(check-expect (all-one-digit? 34) 0)
(check-expect (all-one-digit? 10) 0)
(check-expect (all-one-digit? 11) 1)
(check-expect (all-one-digit? 12) 0)
(check-expect (all-one-digit? -10) 0)
(check-expect (all-one-digit? -11) 1)
(check-expect (all-one-digit? -12) 0)
(check-expect (all-one-digit? 220) 0)
(check-expect (all-one-digit? 221) 0)
(check-expect (all-one-digit? 222) 1)
(check-expect (all-one-digit? -220) 0)
(check-expect (all-one-digit? -221) 0)
(check-expect (all-one-digit? -222) 1)

;; test-ExerciseFd-increasing-digits?.imp
(check-expect (increasing-digits? 0) 1)
(check-expect (increasing-digits? 1) 1)
(check-expect (increasing-digits? 12) 1)
(check-expect (increasing-digits? 21) 0)
(check-expect (increasing-digits? 123) 1)
(check-expect (increasing-digits? 1123) 0)
(check-expect (increasing-digits? 12345) 1)
(check-expect (increasing-digits? 54321) 0)
(check-expect (increasing-digits? 12435) 0)
(check-expect (increasing-digits? 489) 1)
(check-expect (increasing-digits? 2468) 1)
(check-expect (increasing-digits? 2435) 0)
(check-expect (increasing-digits? -1) 1)
(check-expect (increasing-digits? -12) 1)
(check-expect (increasing-digits? -21) 0)
(check-expect (increasing-digits? -123) 1)
(check-expect (increasing-digits? -1123) 0)
(check-expect (increasing-digits? -12345) 1)
(check-expect (increasing-digits? -54321) 0)
(check-expect (increasing-digits? -12435) 0)
(check-expect (increasing-digits? -489) 1)
(check-expect (increasing-digits? -2468) 1)
(check-expect (increasing-digits? -2435) 0)

;; test-ExerciseG-binary.imp
(check-expect (binary   0) 0)
(check-expect (binary   1) 1)
(check-expect (binary   2) 10)
(check-expect (binary   3) 11)
(check-expect (binary   4) 100)
(check-expect (binary   5) 101)
(check-expect (binary  11) 1011)
(check-expect (binary  12) 1100)
(check-expect (binary  13) 1101)
(check-expect (binary  14) 1110)
(check-expect (binary  15) 1111)
(check-expect (binary  16) 10000)
(check-expect (binary  -5) -101)
(check-expect (binary -12) -1100)

;; test-ExerciseH-aliquot-class.imp
(check-expect (aliquot-class  1) -1)
(check-expect (aliquot-class  2) -1)
(check-expect (aliquot-class  3) -1)
(check-expect (aliquot-class  4) -1)
(check-expect (aliquot-class  5) -1)
(check-expect (aliquot-class  6) 0)
(check-expect (aliquot-class  7) -1)
(check-expect (aliquot-class  9) -1)
(check-expect (aliquot-class 10) -1)
(check-expect (aliquot-class 11) -1)
(check-expect (aliquot-class 12) 1)
(check-expect (aliquot-class 13) -1)
(check-expect (aliquot-class 14) -1)
(check-expect (aliquot-class 15) -1)
(check-expect (aliquot-class 16) -1)
(check-expect (aliquot-class 17) -1)
(check-expect (aliquot-class 18) 1)
(check-expect (aliquot-class 19) -1)
(check-expect (aliquot-class 20) 1)
(check-expect (aliquot-class 21) -1)
(check-expect (aliquot-class 22) -1)
(check-expect (aliquot-class 23) -1)
(check-expect (aliquot-class 24) 1)
(check-expect (aliquot-class 25) -1)
(check-expect (aliquot-class 26) -1)
(check-expect (aliquot-class 27) -1)
(check-expect (aliquot-class 28) 0)
(check-expect (aliquot-class 29) -1)
(check-expect (aliquot-class 30) 1)
(check-expect (aliquot-class 31) -1)
(check-expect (aliquot-class 32) -1)
(check-expect (aliquot-class 33) -1)
(check-expect (aliquot-class 34) -1)
(check-expect (aliquot-class 35) -1)
(check-expect (aliquot-class 36) 1)
(check-expect (aliquot-class 37) -1)
(check-expect (aliquot-class 38) -1)
(check-expect (aliquot-class 39) -1)
(check-expect (aliquot-class 40) 1)
(check-expect (aliquot-class 41) -1)
(check-expect (aliquot-class 42) 1)
(check-expect (aliquot-class 43) -1)
(check-expect (aliquot-class 44) -1)
(check-expect (aliquot-class 45) -1)
(check-expect (aliquot-class 46) -1)
(check-expect (aliquot-class 47) -1)
(check-expect (aliquot-class 48) 1)
(check-expect (aliquot-class 49) -1)
(check-expect (aliquot-class 50) -1)
(check-expect (aliquot-class 495) -1)
(check-expect (aliquot-class 496) 0)
(check-expect (aliquot-class 497) -1)
(check-expect (aliquot-class 8127) -1)
(check-expect (aliquot-class 8128) 0)
(check-expect (aliquot-class 8129) -1)

;; test-ExerciseIa-hailstone-length.imp
(check-expect (hailstone-length 1) 0)
(check-expect (hailstone-length 2) 1)
(check-expect (hailstone-length 3) 7)
(check-expect (hailstone-length 4) 2)
(check-expect (hailstone-length 5) 5)
(check-expect (hailstone-length 6) 8)
(check-expect (hailstone-length 7) 16)
(check-expect (hailstone-length 8) 3)
(check-expect (hailstone-length 9) 19)
(check-expect (hailstone-length 10) 6)
(check-expect (hailstone-length 11) 14)
(check-expect (hailstone-length 12) 9)
(check-expect (hailstone-length 13) 9)
(check-expect (hailstone-length 14) 17)
(check-expect (hailstone-length 15) 17)
(check-expect (hailstone-length 16) 4)
(check-expect (hailstone-length 17) 12)
(check-expect (hailstone-length 18) 20)
(check-expect (hailstone-length 19) 20)
(check-expect (hailstone-length 20) 7)
(check-expect (hailstone-length 21) 7)
(check-expect (hailstone-length 22) 15)
(check-expect (hailstone-length 23) 15)
(check-expect (hailstone-length 24) 10)
(check-expect (hailstone-length 25) 23)
(check-expect (hailstone-length 26) 10)
(check-expect (hailstone-length 27) 111)
(check-expect (hailstone-length 28) 18)
(check-expect (hailstone-length 29) 18)
(check-expect (hailstone-length 30) 18)
(check-expect (hailstone-length 31) 106)
(check-expect (hailstone-length 32) 5)
(check-expect (hailstone-length 33) 26)
(check-expect (hailstone-length 34) 13)
(check-expect (hailstone-length 35) 13)
(check-expect (hailstone-length 36) 21)
(check-expect (hailstone-length 37) 21)
(check-expect (hailstone-length 38) 21)
(check-expect (hailstone-length 39) 34)
(check-expect (hailstone-length 40) 8)
(check-expect (hailstone-length 41) 109)
(check-expect (hailstone-length 42) 8)
(check-expect (hailstone-length 43) 29)
(check-expect (hailstone-length 44) 16)
(check-expect (hailstone-length 45) 16)
(check-expect (hailstone-length 46) 16)
(check-expect (hailstone-length 47) 104)
(check-expect (hailstone-length 48) 11)
(check-expect (hailstone-length 49) 24)
(check-expect (hailstone-length 50) 24)
(check-expect (hailstone-length 51) 24)
(check-expect (hailstone-length 52) 11)
(check-expect (hailstone-length 53) 11)
(check-expect (hailstone-length 54) 112)
(check-expect (hailstone-length 55) 112)
(check-expect (hailstone-length 56) 19)
(check-expect (hailstone-length 57) 32)
(check-expect (hailstone-length 58) 19)
(check-expect (hailstone-length 59) 32)
(check-expect (hailstone-length 60) 19)
(check-expect (hailstone-length 61) 19)
(check-expect (hailstone-length 62) 107)
(check-expect (hailstone-length 63) 107)
(check-expect (hailstone-length 64) 6)
(check-expect (hailstone-length 65) 27)
(check-expect (hailstone-length 66) 27)
(check-expect (hailstone-length 67) 27)
(check-expect (hailstone-length 68) 14)
(check-expect (hailstone-length 69) 14)
(check-expect (hailstone-length 70) 14)
(check-expect (hailstone-length 71) 102)
(check-expect (hailstone-length 72) 22)
(check-expect (hailstone-length 77028) 107)
(check-expect (hailstone-length 77029) 107)
(check-expect (hailstone-length 77030) 107)
(check-expect (hailstone-length 77031) 350)
(check-expect (hailstone-length 77032) 76)
(check-expect (hailstone-length 77033) 107)
(check-expect (hailstone-length 77034) 76)

;; test-ExerciseIb-hailstone-max.imp
(check-expect (hailstone-max 1) 1)
(check-expect (hailstone-max 2) 2)
(check-expect (hailstone-max 3) 16)
(check-expect (hailstone-max 4) 4)
(check-expect (hailstone-max 5) 16)
(check-expect (hailstone-max 6) 16)
(check-expect (hailstone-max 7) 52)
(check-expect (hailstone-max 8) 8)
(check-expect (hailstone-max 9) 52)
(check-expect (hailstone-max 10) 16)
(check-expect (hailstone-max 11) 52)
(check-expect (hailstone-max 12) 16)
(check-expect (hailstone-max 13) 40)
(check-expect (hailstone-max 14) 52)
(check-expect (hailstone-max 15) 160)
(check-expect (hailstone-max 16) 16)
(check-expect (hailstone-max 17) 52)
(check-expect (hailstone-max 18) 52)
(check-expect (hailstone-max 19) 88)
(check-expect (hailstone-max 20) 20)
(check-expect (hailstone-max 21) 64)
(check-expect (hailstone-max 22) 52)
(check-expect (hailstone-max 23) 160)
(check-expect (hailstone-max 24) 24)
(check-expect (hailstone-max 25) 88)
(check-expect (hailstone-max 26) 40)
(check-expect (hailstone-max 27) 9232)
(check-expect (hailstone-max 28) 52)
(check-expect (hailstone-max 29) 88)
(check-expect (hailstone-max 30) 160)
(check-expect (hailstone-max 31) 9232)
(check-expect (hailstone-max 32) 32)
(check-expect (hailstone-max 33) 100)
(check-expect (hailstone-max 34) 52)
(check-expect (hailstone-max 35) 160)
(check-expect (hailstone-max 36) 52)
(check-expect (hailstone-max 37) 112)
(check-expect (hailstone-max 38) 88)
(check-expect (hailstone-max 39) 304)
(check-expect (hailstone-max 40) 40)
(check-expect (hailstone-max 41) 9232)
(check-expect (hailstone-max 42) 64)
(check-expect (hailstone-max 43) 196)
(check-expect (hailstone-max 44) 52)
(check-expect (hailstone-max 45) 136)
(check-expect (hailstone-max 46) 160)
(check-expect (hailstone-max 47) 9232)
(check-expect (hailstone-max 48) 48)
(check-expect (hailstone-max 49) 148)
(check-expect (hailstone-max 50) 88)
(check-expect (hailstone-max 51) 232)
(check-expect (hailstone-max 52) 52)
(check-expect (hailstone-max 53) 160)
(check-expect (hailstone-max 54) 9232)
(check-expect (hailstone-max 55) 9232)
(check-expect (hailstone-max 56) 56)
(check-expect (hailstone-max 57) 196)
(check-expect (hailstone-max 58) 88)
(check-expect (hailstone-max 59) 304)
(check-expect (hailstone-max 60) 160)
(check-expect (hailstone-max 61) 184)
(check-expect (hailstone-max 62) 9232)
(check-expect (hailstone-max 63) 9232)
(check-expect (hailstone-max 64) 64)
(check-expect (hailstone-max 65) 196)
(check-expect (hailstone-max 66) 100)
(check-expect (hailstone-max 67) 304)
(check-expect (hailstone-max 68) 68)
(check-expect (hailstone-max 69) 208)
(check-expect (hailstone-max 70) 160)
(check-expect (hailstone-max 71) 9232)
(check-expect (hailstone-max 72) 72)
(check-expect (hailstone-max 77028) 138832)
(check-expect (hailstone-max 77029) 231088)
(check-expect (hailstone-max 77030) 173320)
(check-expect (hailstone-max 77031) 21933016)
(check-expect (hailstone-max 77032) 77032)
(check-expect (hailstone-max 77033) 584980)
(check-expect (hailstone-max 77034) 115552)

